version: "3.8"
services:
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  reverse-proxy:
    image: traefik:v3.3
    container_name: traefik
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_EMAIL=${TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_EMAIL}
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./certs/:/var/traefik/certs/:rw
  db:
    image: pgvector/pgvector:pg16
    container_name: ragtube-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  db-init:
    image: dgarridoa/ragtube:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    container_name: ragtube-db-init
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command:
      - "uv"
      - "run"
      - "python"
      - "-m"
      - "ragtube.cli"
    env_file: ".env"
    environment:
      - OLLAMA_HOST=http://host.docker.internal:11434
    volumes:
      - ./params.yaml:/app/params.yaml:ro
  api:
    image: dgarridoa/ragtube:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.api-http.rule=Host(`$HOSTNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-http.entrypoints=web"
      - "traefik.http.routers.api-http.priority=2"
      - "traefik.http.routers.api-http.middlewares=api-stripprefix"
      - "traefik.http.routers.api-https.rule=Host(`$HOSTNAME`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-https.tls=true"
      - "traefik.http.routers.api-https.tls.certresolver=cloudflare"
      - "traefik.http.routers.api-https.entrypoints=websecure"
      - "traefik.http.routers.api-https.priority=2"
      - "traefik.http.routers.api-https.middlewares=api-stripprefix"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.api-stripprefix.stripprefix.forceSlash=false"
    container_name: ragtube-api
    depends_on:
      db-init:
        condition: service_completed_successfully
    command:
      - "uv"
      - "run"
      - "uvicorn"
      - "ragtube.api:app"
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "5000"
      - "--log-config"
      - "log_config.yaml"
      - "--root-path"
      - "/api"
    env_file: ".env"
    environment:
      - OLLAMA_HOST=http://host.docker.internal:11434
    volumes:
      - ./params.yaml:/app/params.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000/readiness"]
      interval: 30s
      retries: 10
      start_period: 300s
      timeout: 10s
  ui:
    image: dgarridoa/ragtube-frontend:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.ui-http.rule=Host(`$HOSTNAME`)"
      - "traefik.http.routers.ui-http.entrypoints=web"
      - "traefik.http.routers.ui-http.priority=1"
      - "traefik.http.routers.ui-https.rule=Host(`$HOSTNAME`)"
      - "traefik.http.routers.ui-https.tls=true"
      - "traefik.http.routers.ui-https.tls.certresolver=cloudflare"
      - "traefik.http.routers.ui-https.entrypoints=websecure"
      - "traefik.http.routers.ui-https.priority=1"
    container_name: ragtube-ui
    depends_on:
      api:
        condition: service_healthy
    ports:
      - 8501:8501
    environment:
      - NODE_ENV=production
      - HOSTNAME=${HOSTNAME}
volumes:
  postgres_data:
