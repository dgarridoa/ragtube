name: CI pipeline

on:
  pull_request:
    types: [ opened, synchronize ]
    branches:
      - 'main'
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'Dockerfile'
      - '**.yaml'
      - '**.html'
      - '**.js'
      - '**.css'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
      packages: write
      attestations: write
      id-token: write

    services:
      postgres:
        image: pgvector/pgvector:pg16
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env-test file
        run: |
          cat <<EOF > .env-test
          YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}
          HTTPS_PROXY=${{ secrets.HTTPS_PROXY }}
          DB_USER=postgres
          DB_PASSWORD=postgres
          DB_HOST=postgres
          DB_PORT=5432
          DB_NAME=postgres
          API_HOST=api
          API_PORT=5000
          EOF

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install project dependencies
        run: |
          uv sync --all-extras

      - name: Install frontend dependencies
        run: |
          cd frontend && npm ci

      - name: Run pre-commit check
        run: |
          uv run pre-commit run --all-files

      - name: Check frontend formatting
        run: |
          cd frontend && npm run format:check

      - name: Run pytest
        run: |
          uv run pytest --cov-report "xml:coverage.xml" --cov ragtube tests/

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./coverage.xml

      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Ragtube image
        id: ragtube
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          target: ragtube
          tags: |
            ${{ vars.DOCKER_HUB_USERNAME }}/ragtube:latest
            ${{ vars.DOCKER_HUB_USERNAME }}/ragtube:${{ github.sha }}
            ghcr.io/${{ github.actor }}/ragtube:latest
            ghcr.io/${{ github.actor }}/ragtube:${{ github.sha }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ragtube
          subject-digest: ${{ steps.ragtube.outputs.digest }}
          push-to-registry: true

      - name: Build and push Ollama image
        id: ollama
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          target: ollama
          tags: |
            ${{ vars.DOCKER_HUB_USERNAME }}/ollama:latest
            ${{ vars.DOCKER_HUB_USERNAME }}/ollama:${{ github.sha }}
            ghcr.io/${{ github.actor }}/ollama:latest
            ghcr.io/${{ github.actor }}/ollama:${{ github.sha }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ollama
          subject-digest: ${{ steps.ollama.outputs.digest }}
          push-to-registry: true

      - name: Build and push Frontend image
        id: frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ vars.DOCKER_HUB_USERNAME }}/ragtube-frontend:latest
            ${{ vars.DOCKER_HUB_USERNAME }}/ragtube-frontend:${{ github.sha }}
            ghcr.io/${{ github.actor }}/ragtube-frontend:latest
            ghcr.io/${{ github.actor }}/ragtube-frontend:${{ github.sha }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/${{ vars.DOCKER_HUB_USERNAME }}/ragtube-frontend
          subject-digest: ${{ steps.frontend.outputs.digest }}
          push-to-registry: true
